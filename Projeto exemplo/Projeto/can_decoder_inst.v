// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 16.1 (Build Build 203 01/18/2017)
// Created on Mon Jun 05 23:48:08 2017

can_decoder can_decoder_inst
(
	.clock(clock_sig) ,	// input  clock_sig
	.reset(reset_sig) ,	// input  reset_sig
	.rx_bit(rx_bit_sig) ,	// input  rx_bit_sig
	.sample_point(sample_point_sig) ,	// input  sample_point_sig
	.error_in(error_in_sig) ,	// input  error_in_sig
	.error_out(error_out_sig) ,	// output  error_out_sig
	.field_start_of_frame(field_start_of_frame_sig) ,	// output  field_start_of_frame_sig
	.field_id_a(field_id_a_sig) ,	// output [10:0] field_id_a_sig
	.field_ide(field_ide_sig) ,	// output  field_ide_sig
	.field_rtr(field_rtr_sig) ,	// output  field_rtr_sig
	.field_srr(field_srr_sig) ,	// output  field_srr_sig
	.field_reserved1(field_reserved1_sig) ,	// output  field_reserved1_sig
	.field_reserved0(field_reserved0_sig) ,	// output  field_reserved0_sig
	.field_id_b(field_id_b_sig) ,	// output [17:0] field_id_b_sig
	.field_dlc(field_dlc_sig) ,	// output [3:0] field_dlc_sig
	.field_data(field_data_sig) ,	// output [63:0] field_data_sig
	.field_crc(field_crc_sig) ,	// output [14:0] field_crc_sig
	.field_crc_delimiter(field_crc_delimiter_sig) ,	// output  field_crc_delimiter_sig
	.field_ack_slot(field_ack_slot_sig) 	// output  field_ack_slot_sig
);

defparam can_decoder_inst.len_id_a = 'b1011;
defparam can_decoder_inst.len_id_b = 'b10010;
defparam can_decoder_inst.len_dlc = 'b100;
defparam can_decoder_inst.len_crc = 'b1111;
defparam can_decoder_inst.len_eof = 'b111;
defparam can_decoder_inst.len_interframe = 'b10;
